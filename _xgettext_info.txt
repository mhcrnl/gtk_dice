/*
 * Quick guide for localization with the GNU-gettext library
 * ---------------------------------------------------------
 * First I list all the required steps, then I explain them in more detail
 * (note that alternatively, POEDIT can be used for steps 2, 3 and 4)
 */

xgettext -k_ -kN_ -d gtk_dice -s -o default.pot gtk_dice.c gui/dice.glade

msginit -l el -o gtk_dice.po -i default.pot
or
msgmerge -s -U gtk_dice.po default.pot

translate dice.po

msgfmt -c -v -o gtk_dice.mo gtk_dice.po

move gtk_dice.mo to the appropriate directory & set the LANG environment variabale

/* ------------------------------------------------
 * STEP-1:
 * 	Extract translatable strings from sources
 * 	into a Portable Object Template file (.pot)
 * ------------------------------------------------
 */
xgettext -k_ -kN_ -d gtk_dice -s -o default.pot gtk_dice.c gui/dice.glade

/*
 * The above command generates the file "default.pot" from the source
 * files "gtk_dice.c" and "gui/dice.glade". Due to the -k flags, the
 * generated file "default.pot" will contain all the strings that are
 * enclosed within _() and N_() in the source file "gtk_dice.c", along
 * with all the strings that are marked as "translatable" in the file:
 * "gui/dice.glade" (which btw is just an XML file, created by Glade).
 *
 * The -s flag tells 'xgettext' to sort the generated strings in "default.pot".
 * 
 * The -d flag passes the GNU-gettext translation text-domain, which in our
 * case is passed as "gtk_dice" (just the name of our project). This text-domain
 * along with the desired locale-directory, must have been already defined
 * in the source files *before* including the GLib internationalization
 * header-file: <glib/gi18n.h>.
 * On a side note, they must also get initialized (via a series of function
 * calls of the GNU-gettext API) *before* calling gtk_init().
 *
 * Here is an example, defining & initializing localization stuff,
 * according to the documentation of the GNU-gettext & GTK+2 APIs:
 * 	...
 *	/* for libraries, order MATTERS */
 *	#define GETTEXT_PACKAGE	"gtk_dice"	/* our text-domain */
 *	#define LOCALEDIR	"lang"		/* our locale-directory */
 *	#include <glib/gi18n.h>			/* for libs this MUST come last */
 *	...
 *	#include <gtk.h>	/* order of this doesn't really matter */
 *	...
 *	int main( int argc, char *argv[] )
 *	{
 *		/* error-checking of the following is omitted, for brevity */
 *
 *		setlocale( LC_ALL, NULL );
 *		bindtextdomain( GETTEXT_PACKAGE, LOCALEDIR );
 *		bind_textdomain_codeset( GETTEXT_PACKAGE, "UTF-8" );
 *		textdomain( GETTEXT_PACKAGE );
 *		...
 *		gtk_init( &argc, &argv );
 * 		...
 *	}
 */

/* ----------------------------------------------------
 * STEP-2a:
 * 	Based on the Portable Object Template file (.pot)
 *	generated in Step-1, generate a new Portable Object
 *	file (.po) with its header initialized according to
 *	the desired locale.
 * ----------------------------------------------------
 */
msginit -l el -o gtk_dice.po -i default.pot

/*
 * The above command generates the file "gtk_dice.po" (flag -o)
 * from the template file "default.pot" (flag -i), with the header
 * inside the former being initialized for the locale "el" (flag -l).
 *
 * The generated file should have the same name with the text-domain
 * we specified in 'xgettext' in Step-1 (plus the ".po" extension).
 * So in our case, it is "gtk_dice.po".
 *
 * The specified locale ("el" in this case) should already be installed
 * in the system, because 'msginit' uses it in order to fill-in several
 * fields of the header (such as the character-set, the text-encoding, etc).
 * It also prompts for the email of the translator (probably you) and
 * embeds it too into the header of the file "gtk_dice.po".
 *
 * If the specified locale is not installed, we can always open the 
 * generated file "gtk_dice.po" with a simple text editor, and fill-in
 * by hand the required header information (both ".pot" and ".po" files
 * are plain XML files).
 *
 * On Windows, when using the MinGW toolchain or directly the stand-alone
 * GNU-gettext toolchain (available on the GNU site) the 'msginit' tool
 * may fail.
 *
 * A much better alternative is POEDIT (http://www.poedit.net/). It has
 * a graphical user interface (GUI) and a native Windows binary. This is
 * actually what I use! I simply load the template file "gtk_dice.pot"
 * into POEDIT, then I fill-in the header info via the tab "Translation
 * Properties" (open it via "Catalog -> Properties") and lastly I use
 * "File -> Save as..." to create the file "gtk_dice.po". 
 */

/* ----------------------------------------------------
 * STEP-2b:
 * 	Update an existing Portable Object file (.po).
 * ----------------------------------------------------
 */
msgmerge -s -U gtk_dice.po default.pot

/*
 * The above command updates the contents of the file "gtk_dice.po" (flag -U)
 * according to the contents of the file "default.po". This means that the
 * strings found in the latter are added to the former, while any extra
 * strings in the latter are either or marked for comments.
 *
 * This step is not meant to follow Step-2a. The very first time we follow
 * Step-1, and then when we want to update our translation we follow Step-2b.
 */

/* ----------------------------------------------------------
 * STEP-3:
 * 	Translate the initialized Portable Object file (.po).
 * ----------------------------------------------------------
 *
 * Translating a Portable Object file ("gtk_dice.po" in our case) may be
 * done with a plain text editor, by translating strings marked as 'msgid'
 * into their corresponding strings marked as 'msgstr'.
 *
 * However, it is much simpler (and much more fun) if we use a specialized
 * editor, such as the cross-platform POEDIT (http://www.poedit.net/).
 */

/* ----------------------------------------------------
 * STEP-4:
 * 	Compile the translated Portable Object file (.po)
 *	into a GNU-gettext binary Machine Object (.mo), and place it
 *	into the locale directory of our application.
 * ----------------------------------------------------
 */
msgfmt -c -v -o gtk_dice.mo gtk_dice.po

/*
 * The above command compiles the Portable Object file "gtk_dice.po",
 * generating the binary Machine Object file "gtk_dice.mo" (flag -o).
 * The flag -c enables detailed checking of the .po file format, while
 * the flag -v enables detailed reports (verbose mode).
 *
 * Once again, I much prefer using POEDIT (http://www.poedit.net/) instead,
 * which generates the compiled Machine Object file "gtk_dice.mo" by simply
 * applying "File -> Save..." on the file "gtk_dice.po".
 * Put in other words, I use POEDIT for Steps 2, 3 and 4.
 *
 * What's important though, is that the name of the compiled .mo file
 * must be exactly the same with the text-domain we specified in 'xgettext'
 * (plus the ".mo" extension of course), in Step-1. Which is in turn exactly
 * the same with the text-domain we have passed as the 1st argument to the
 * functions: bindtextdomain(), bind_textdomain_codeset() and textdomain()
 * inside our source file: "gtk_dice.c" (see Step-1).
 * 
 */

/* ----------------------------------------------------
 * STEP-5:
 * 	Place the GNU-gettext binary Machine Object file (.mo),
 *	into the specified locale-directory of our application,
 *	and set accordingly the environment variable LANG.
 * ----------------------------------------------------
 */
/*
 * There's more stuff going on when using a Unix or Unix-like OS,
 * but here is the bare minimum so it will work on Windows too with
 * the less possible hassle.
 *
 * First, we need to create our locale-directory exactly as we have specified
 * it in our source files, path included (e.g. "./lang" in our case). See the
 * sample code snippet in Step-1 for the defined value of LOCALEDIR.
 *
 * Next we need to create a sub-directory in it, named exactly as the locale
 * we used in Step-2a (e.g. "el" in our case).
 *
 * Then we need to create another sub-directory in it, named "LC_MESSAGES",
 * and copy the Machine Object file "gtk_dice.mo" into it.
 *
 * So, the end result will be: ./lang/el/LC_MESSAGES/gtk_dice.mo
 *
 * The last step is to set (or create) the LANG environment variable equal
 * to our locale.
 * In the Windows command-prompt, it is done by typing:
 *	set LANG=el
 * In the sh/bash shell (popular on Linux), it is done by typing:
 *	export LANG=el
 * In the csh/tcsh shell (popular on Unix), it is done by typing:
 *	setenv LANG el
 *
 * Making it permanent, requires you to edit the resource file of your favorite
 * shell. On Windows however, you can right-click on "My Computer", then select
 * "Properties | [Advanced] | [Environment variables]" and add it either in the
 * "User" area (just your account) or in the "System" area (all accounts).
 */
